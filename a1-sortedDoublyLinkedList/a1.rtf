{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid3\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid103\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl560\sa321\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 DS Assignment #1\'a0\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b0\fs24 \cf2 Write a program, based on Mini-assignment #2, that keeps track of ratings for MP3 files and displays information about them.\
\pard\pardeftab720\sl440\sa298\partightenfactor0

\b\fs36 \cf2 Changed Functional Requirements\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0
\b0\fs24 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Along with the artist and title for each song, also get an integer from the user that represents the rating for the song. The order of input for each song should be artist, title, and rating, all on separate lines.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can assume that the artist and title are least 1 character long and no longer than 30 (this is different from the Mini-Assignment).\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Valid ratings are 1 to 5 inclusive.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 No other input is allowed.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Put the input into a sorted doubly-linked list (instead of the unsorted singly-linked list from Mini #2), where the sorting is done by rating. If two songs have the same rating, you can arbitrarily choose which song to put first.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The sorting must be done such that each element is inserted into the proper location in the list in turn. Do\'a0
\b not\'a0
\b0 create an unsorted list and then sort the list afterwards (doing thist would result in a failing mark for the assignment).\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 At the same time, put the song into another sorted linked list, where the sorting is done by artist. If two songs have the same artist, you can arbitrarily choose which song to put first.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The user will never enter a song with an artist and title that is already in the list (e.g. if "Beautiful Day" by "U2" is in the list already, the user will not ask you to enter it again).\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Stop getting user input once an invalid rating is entered.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This means that there is no longer a limit of 10 songs.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You should ignore the song that had the invalid rating (i.e. don't put it into the linked list).\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 After the input is complete, traverse the ratings-sorted linked list, displaying one song per line with artist (left-justified with a width of 35 (not 40) characters), title (left-justified with a width of 35 (not 40) characters), and rating (left-justified).\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Next, traverse the artist-sorted linked list, displaying with the same output format as the previous traversal.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Next, obtain one song as additional user input in the same format as before. Search for that song in the artist-sorted linked list.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If there is a match of artist, title, and rating, prompt for a new rating.\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl280\partightenfactor0
\ls1\ilvl2\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If the rating is changed, update the artist-sorted linked list with the new rating. Then delete the song from the rating-sorted linked list and re-insert it.\
\ls1\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If the rating is unchanged, do nothing.\
\ls1\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The rating will be a valid rating between 1 and 5 inclusive.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If there is not an exact match, simply ignore the change and continue with the next step (i.e. just redisplay both linked lists).\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Redisplay both linked lists as before.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Once completely done, you must free\'a0
\b all
\b0 \'a0allocated memory.\
\pard\pardeftab720\sl440\sa298\partightenfactor0

\b\fs36 \cf2 Additional Functions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0
\b0\fs24 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create the\'a0
\i findSong
\i0 () function. It returns NULL if a song is not found or it returns a pointer to the node containing a song, if both the title and artist are matched (with a non-case-sensitive match). It takes three parameters:\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl280\partightenfactor0
\ls2\ilvl2\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 songNode *head: head of list\
\ls2\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 char *artist: pointer to null-terminated string containing artist\
\ls2\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 char *title: pointer to null-terminated string containing title\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If only the artist or the title are found but both are not found in the same node, the song is not found.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create the\'a0
\i deleteNode()\'a0
\i0 function. It deletes a node, using three parameters:\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl280\partightenfactor0
\ls2\ilvl2\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 songNode *node: node to delete\
\ls2\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 songNode **head: pointer to head of list\
\ls2\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9642 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 songNode **tail: pointer to tail of list\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls2\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The key to this function is relinking pointers around the node before deleting.\
\ls2\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If node is NULL, it returns immediately.\
\ls2\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It returns nothing.\
\pard\pardeftab720\sl440\sa298\partightenfactor0

\b\fs36 \cf2 Other Requirements\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0
\b0\fs24 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The\'a0
\i artist\'a0
\i0 and\'a0
\i title\'a0
\i0 fields must be dynamically allocated to an appropriate size as in Mini-assignment 1.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do not get user input except as described in these requirements.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do not display output except as described in these requirements.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do not clear the screen at any time in this program.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You must do error checking where necessary.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls3\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If you use getNum() for input of the rating, you do not have to error-check the input beyond what getNum() does.\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If you detect an error, you should display an appropriate error message and take appropriate action.\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can assume that all statements above that have the phrase "will be" in them will be true when testing is done.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It must not use global variables.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It must not use goto.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It must be programmed in C or C++ (your choice). Be aware that malloc() does not support C++ strings.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The SET Coding Standards must be adhered to.\
\pard\pardeftab720\sl440\sa298\partightenfactor0

\b\fs36 \cf2 File Requirements\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0
\b0\fs24 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Call your project dsA1.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Call the file with your main() in it dsA1.c or dsA1.cpp.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Call the file with your linked list functions in it dsA1LL.c or dsA1LL.cpp.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl280\partightenfactor0
\ls4\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If you have trouble deciding which file a function should go into, ask yourself "could I use this function in another program that uses linked list without having to change much (it doesn't have to be perfect) in it?"\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl280\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create dsA1.h for inclusion into both of the above files for sharing constants, data types, prototypes, constants.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do not create other source files.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Put your submission into the appropriate eConestoga dropbox according to the SET Submission Standard when you submit your assignment.\
}