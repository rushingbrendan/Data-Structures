{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset204 PTSans-Regular;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid3\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl640\sa321\partightenfactor0

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 DS Assignment 2 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\b0\fs24 \cf2 For this assignment, you will compare the efficiency of searching a sorted linked list and a hash table.\uc0\u8232 \u8232 You should use a variation of your code for Mini-Assignment 3 for this.\
\pard\pardeftab720\sl460\sa298\partightenfactor0

\b\fs36 \cf2 Modifications from Mini-Assignment 3\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0
\b0\fs24 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Instead of getting the words to load into the hash table from the user, you must load at least 2000 words from a file called words.txt as input (using file I/O). It is OK if you share the words with classmates for this. Make sure that your words are sorted in random order (more about this later). The words.txt file must be in the same directory as your source code.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It's OK to use more than 2000 words but don't have more than 10000.\uc0\u8232 \u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When you load a word into the hash table, also load the words into one very long sorted linked list. You\'a0
\b must\'a0
\b0 use the same function for inserting into the sorted linked list as for inserting into the hash table bucket's linked list.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make the hash table 127 buckets in size.\'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You must create a function called searchLinkedList that searches a sorted linked list for a word and returns a pointer to the node containing the word (if found) or NULL.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 This function must return NULL immediately after you pass the point in the linked list where the word would have been found if it was in the linked list.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The function takes three parameters:\
\pard\tx1660\tx2160\pardeftab720\li2160\fi-2160\sl300\partightenfactor0
\ls1\ilvl2\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 char * searchWord: word to search for (entered by the user)\
\ls1\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 struct linkedList * linkedList: linked list to search (in your program, you can call the linked list node struct anything that makes sense)\
\ls1\ilvl2\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 int * comparisonCount: pointer to int filled in by the function with the count of strcmp comparisons done in searching the linked list\'a0\uc0\u8232 \u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create a search function called searchForWordTwice. It returns nothing and will have the following parameters:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 char * searchWord: word to search for (entered by the user)\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 struct linkedList * linkedList: linked list to search\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 struct linkedList * hashTable[]: hash table to search\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 int comparisonCount[2]: array containing the count of strcmp comparisons done in searching the extremely-long sorted linked list (element 0) and in searching the hash table (element 1)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It must call your linked list search function and then displays one of the following messages once the search is done:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 "
\i word
\i0 \'a0was found in the\'a0
\i list
\i0 \'a0in\'a0
\i number
\i0 \'a0comparisons", where\'a0
\i word
\i0 \'a0is the word being searched for,\'a0
\i list\'a0
\i0 is either "linked list" or "hash table bucket" and\'a0
\i number
\i0 equals the number of times that strcmp was called\'a0\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 "
\i word
\i0 \'a0was NOT found in the\'a0
\i list
\i0 \'a0in\'a0
\i number
\i0 \'a0comparisons"\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You will use this search function to search the hash table bucket and the sorted linked list.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sl300\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Don't worry about the grammatical inconsistency of possibly displaying "1 comparisons".\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f1 \uc0\u9702 
\f0 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Indent the message displayed by one TAB ('\\t').\uc0\u8232 \u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Once you are finished the loop, display the total number of searches, the total number of comparisons done by searching the sorted linked list, and the total number of comparisons done by searching the hash table.\uc0\u8232 \
\pard\pardeftab720\sl460\sa298\partightenfactor0

\b\fs36 \cf2 Other Requirements\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\b0\fs24 \cf2 Design your linked list code so that you do not have to duplicate code unnecessarily.\'a0This is very important.\
Clean up\'a0
\b all
\b0 \'a0allocated memory before exiting.\
Use constants to avoid magic numbers.\
You can assume that all words will be in lowercase.\
Your program must compile without warnings. If you have to use a #pragma as stated in the C course notes in order to get rid of the Microsoft-specific warnings, you should do so.\uc0\u8232 \u8232 Your project must be named dsA2.\u8232 \u8232 The source file that contains your main() function must be called dsA2.c or dsA2.cpp. Put all hash table-related code in hashing.c or hashing.cpp.\'a0 Put all linked list-related code in linkedlist.c or linkedlist.cpp (and linkedlist.h if you are using a class).\'a0 Create other .h files as needed to support compilation. Do not create any other source files.\u8232 \u8232 Remember to put appropriate header comments at the top of ALL source files.\u8232 \u8232 Create a JPG file called compare.jpg that contains a screenshot of your program running with a full screen of sample output (so that I can see the difference in comparison count between the methods for multiple\'a0
\b successful and unsuccessful
\b0 \'a0searches (do not skimp on the number of searches)). Make sure that it\'a0
\b includes the final summary output
\b0 . Put this file in the\'a0
\b top directory
\b0 \'a0of your project (so that it is submitted with your submission). A\'a0{\field{\*\fldinst{HYPERLINK "https://conestoga.desire2learn.com/content/enforced/203337-PROG1370-102-18S-1_18S_X_B309_PROG1370_SEC1_X/004-Assignments/compare.jpg?_&d2lSessionVal=YsrnUWknwxF3HBR4qZeznNi7E&ou=203337"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 sample of this file}}\'a0is provided for you. Please follow the output format and contents exactly.\
Provide your words.txt file in the same directory as your source code.\
Call your ZIP file DSA2.zip.\uc0\u8232 \u8232 Submit your submission to the appropriate dropbox as required by the SET Submission Standards document.\
}